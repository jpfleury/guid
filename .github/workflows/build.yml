name: Build and release guid for Linux, macOS and Windows

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  set-vars:
    runs-on: ubuntu-22.04
    outputs:
      tag_name: ${{ steps.vars.outputs.tag }}
    steps:
      - id: vars
        run: |
          echo "tag=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"

  build-linux:
    runs-on: ubuntu-22.04
    needs: set-vars

    env:
      QT_V:           "5.14.1"
      QT_STATIC_URL:  "https://s.42l.fr/qt-5-14-1-static-linux-tgz"
      QT_STATIC_TGZ:  "qt5-static-linux.tgz"
      QT_STATIC_PATH: "/usr/local/qt5-static"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-v1

      - name: Install build deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libxkbcommon-dev qtbase5-dev qttools5-dev

      - name: Download static Qt
        run: |
          curl -L "$QT_STATIC_URL" -o "$QT_STATIC_TGZ"
          sudo mkdir -p "$QT_STATIC_PATH"
          sudo tar -xf "$QT_STATIC_TGZ" -C /
          rm -f "$QT_STATIC_TGZ"

      - name: Build qtx11extras (not shipped in the static bundle)
        run: |
          curl -L "https://download.qt.io/archive/qt/${QT_V%.*}/$QT_V/single/qt-everywhere-src-$QT_V.tar.xz" -o qt-src.tar.xz
          tar -xf qt-src.tar.xz
          cd "qt-everywhere-src-$QT_V"
          "$QT_STATIC_PATH/bin/qmake" qtx11extras
          make -j "$(nproc)"
          sudo make install

      - name: Build guid
        run: |
          "$QT_STATIC_PATH/bin/qmake" guid.pro
          make -j "$(nproc)"

      - name: Test executable
        run: |
          guid_bin=./guid
          
          [[ -x $guid_bin ]] || { echo "Binary not found"; exit 1; }
          
          guid_version=$("$guid_bin" --version)
          
          [[ $guid_version == "guid version "* ]] || { echo "Failed to run guid properly: $guid_version"; exit 1; }

      - name: Generate documentation
        run: |
          ./guid --help-all > guid-help.txt
      
      - name: Prepare artifact
        run: |
          zip -9 guid-linux-x86_64.zip guid guid-help.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x86_64
          path: guid-linux-x86_64.zip
          if-no-files-found: error
          retention-days: 1

  build-macos:
    runs-on: macos-13
    needs: set-vars

    env:
      QT_STATIC_URL:  "https://s.42l.fr/qt-5-14-2-static-osx-tgz"
      QT_STATIC_TGZ:  "qt5-static-osx.tgz"
      QT_STATIC_PATH: "/usr/local/qt5-static"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Select Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '14.1.0'

      - name: Install build deps
        run: |
          brew install coreutils binutils gnu-sed

      - name: Download static Qt
        run: |
          curl -L "$QT_STATIC_URL" -o "$QT_STATIC_TGZ"
          sudo mkdir -p "$QT_STATIC_PATH"
          sudo tar -xf "$QT_STATIC_TGZ" -C /
          rm -f "$QT_STATIC_TGZ"

      - name: Build guid
        run: |
          "$QT_STATIC_PATH/bin/qmake" guid.pro
          make -j "$(sysctl -n hw.logicalcpu)"

      - name: Test executable
        run: |
          guid_bin=guid.app/Contents/MacOS/guid
          
          [[ -x $guid_bin ]] || { echo "Binary not found"; exit 1; }
          
          guid_version=$("$guid_bin" --version)
          
          [[ $guid_version == "guid version "* ]] || { echo "Failed to run guid properly: $guid_version"; exit 1; }

      - name: Generate documentation
        run: |
          guid.app/Contents/MacOS/guid --help-all > guid-help.txt

      - name: Prepare artifact
        run: |
          zip -9 -j guid-macos-x86_64.zip guid.app/Contents/MacOS/guid guid-help.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-x86_64
          path: guid-macos-x86_64.zip
          if-no-files-found: error
          retention-days: 1

  build-windows:
    runs-on: windows-2019
    needs: set-vars
    defaults:
      run:
        shell: cmd

    env:
      QT_STATIC_URL:    "https://s.42l.fr/qt-5-15-0-no-zstd-static-win64-tgz"
      QT_STATIC_TGZ:    "qt5-static-win64.tgz"
      QT_STATIC_TAR:    "qt5-static-win64.tar"
      QT_STATIC_PATH:   "C:\\libs"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download static Qt
        run: |
          C:\msys64\usr\bin\curl.exe -L "%QT_STATIC_URL%" -o "%QT_STATIC_TGZ%"
          
          move "%QT_STATIC_TGZ%" C:\
          
          7z x C:\%QT_STATIC_TGZ% -oC:\
          7z x C:\%QT_STATIC_TAR% -oC:\
          
          move C:\c\libs C:\
          
          del C:\%QT_STATIC_TGZ%
          del C:\%QT_STATIC_TAR%

      - name: Build guid
        run: |
          set PATH=C:\msys64\mingw64\bin;%PATH%
          %QT_STATIC_PATH%\bin\qmake.exe guid.pro
          mingw32-make.exe -j %NUMBER_OF_PROCESSORS%

      - name: Test executable
        shell: pwsh
        run: |
          if (-not (Test-Path .\release\guid.exe)) {
            throw "Binary not found"
          }

          $guid_version = (& .\release\guid.exe --version)

          if ($guid_version -notmatch '^guid version ') {
            Write-Error "Failed to run guid properly:`n$guid_version"
            exit 1
          }

      - name: Generate documentation
        run: |
          .\release\guid.exe --help-all > guid-help.txt

      - name: Prepare artifact
        run: |
          7z a guid-windows-x86_64.zip .\release\guid.exe guid-help.txt -mx9

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-x86_64
          path: guid-windows-x86_64.zip
          if-no-files-found: error
          retention-days: 1

  release:
    runs-on: ubuntu-22.04
    needs: [set-vars, build-linux, build-macos, build-windows]
    if: always()

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout (docs / changelog access)
        uses: actions/checkout@v4

      - name: Download packaged artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Create draft release
        run: |
          tag=${{ needs.set-vars.outputs.tag_name }}
          
          # Note: release is created as draft for manual validation
          gh release create "$tag" -t "guid $tag" -n "Static builds for guid $tag" --draft

      - name: Upload assets
        run: |
          tag=${{ needs.set-vars.outputs.tag_name }}
          
          for archive in *.zip; do
            gh release upload "$tag" "$archive"
          done
